generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model KnowledgeChunk {
  id              String        @id @default(cuid())
  knowledgeItemId String
  content         String
  chunkIndex      Int
  embeddingData   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  knowledgeItem   KnowledgeItem @relation(fields: [knowledgeItemId], references: [id], onDelete: Cascade)

  @@index([knowledgeItemId])
  @@index([knowledgeItemId, chunkIndex])
  @@index([createdAt])
  @@index([createdAt, knowledgeItemId])
}

model User {
  id                     String          @id @default(cuid())
  role                   String          @default("user")
  hasCompletedOnboarding Boolean         @default(false)
  lastMessageReset       DateTime        @default(now())
  messagesUsedToday      Int             @default(0)
  plan                   UserPlan        @default(FREE)
  lastUploadReset        DateTime        @default(now())
  uploadsThisMonth       Int             @default(0)
  consentTimestamp       DateTime?
  dataProcessingConsent  Boolean         @default(false)
  privacyPolicyVersion   String?
  freeMessagesRemaining  Int             @default(15)
  chats                  Chat[]
  clientMemory           ClientMemory?
  knowledgeItems         KnowledgeItem[]
  subscription           Subscription?
  // Coach chat relations
  userCoachChats         CoachChat[]     @relation("UserCoachChats")
  coachCoachChats        CoachChat[]     @relation("CoachCoachChats")
  sentCoachMessages      CoachMessage[]

  // Training program relations
  userPurchases UserPurchase[]
  userPrograms  UserProgram[]

  @@index([lastMessageReset])
  @@index([lastUploadReset])
  @@index([plan])
  @@index([role])
}

model Chat {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
}

model CoachChat {
  id        String          @id @default(cuid())
  title     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String // User who initiated the chat
  coachId   String // Coach assigned to the chat
  status    CoachChatStatus @default(ACTIVE)
  user      User            @relation("UserCoachChats", fields: [userId], references: [id])
  coach     User            @relation("CoachCoachChats", fields: [coachId], references: [id])
  messages  CoachMessage[]

  @@index([userId])
  @@index([coachId])
  @@index([status])
  @@index([createdAt])
}

model CoachMessage {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  content     String
  senderId    String // User ID of who sent the message
  coachChatId String
  isRead      Boolean   @default(false)
  sender      User      @relation(fields: [senderId], references: [id])
  coachChat   CoachChat @relation(fields: [coachChatId], references: [id], onDelete: Cascade)

  @@index([coachChatId])
  @@index([senderId])
  @@index([createdAt])
}

model Message {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  content       String
  role          Role
  chatId        String
  imageData     String?
  imageMimeType String?
  chat          Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model KnowledgeItem {
  id                    String                  @id @default(cuid())
  title                 String
  type                  KnowledgeType
  content               String?
  fileName              String?
  fileSize              Int?
  filePath              String?
  mimeType              String?
  status                ProcessingStatus        @default(PROCESSING)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userId                String
  category              String?                 @default("General")
  chunks                KnowledgeChunk[]
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  KnowledgeItemCategory KnowledgeItemCategory[]
}

model ClientMemory {
  id                     String         @id @default(cuid())
  userId                 String         @unique
  name                   String?
  age                    Int?
  height                 Float?
  weight                 Float?
  bodyFatPercentage      Float?
  trainingExperience     String?
  weeklyTrainingDays     Int?
  preferredTrainingStyle String?
  trainingSchedule       String?
  availableTime          Int?
  primaryGoal            String?
  secondaryGoals         String[]
  targetWeight           Float?
  targetBodyFat          Float?
  goalDeadline           DateTime?
  motivation             String?
  injuries               String[]
  limitations            String[]
  medications            String[]
  allergies              String[]
  dietaryPreferences     String[]
  foodDislikes           String[]
  supplementsUsed        String[]
  sleepHours             Float?
  stressLevel            String?
  workSchedule           String?
  gymAccess              Boolean        @default(false)
  homeGym                Boolean        @default(false)
  equipmentAvailable     String[]
  gymBudget              Float?
  currentBench           Float?
  currentSquat           Float?
  currentDeadlift        Float?
  currentOHP             Float?
  preferredLanguage      String         @default("en")
  communicationStyle     String?
  coachingNotes          Json?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  lastInteraction        DateTime       @default(now())
  activityLevel          ActivityLevel?
  gender                 Gender?
  customCyclePattern     String?
  trainingCycle          String?
  trainingStructureType  String?
  user                   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                 String    @id @default(cuid())
  userId             String    @unique
  lemonSqueezyId     String?   @unique
  status             String    @default("active")
  planId             String?
  variantId          String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIConfiguration {
  id                        String   @id @default("singleton")
  systemPrompt              String   @default("AI Persona & Core Directives\nIdentity: Elite AI Kinesiology Specialist\nYou are an elite AI Kinesiology Specialist, engineered for precision in fitness and body composition. Your function is to deliver data-driven, evidence-based guidance with maximum efficiency.\n\nCore Expertise:\n- Applied Biomechanics & Exercise Execution\n- Physiology of Muscle Hypertrophy & Strength Adaptation\n- Metabolic Science for Nutrient Timing & Fat Loss\n- Advanced Periodization & Programming for Athletes\n- Data-Driven Progressive Overload\n\nCRITICAL: Information Extraction & Storage\nWhenever the user provides ANY personal information about themselves, you MUST call the update_client_profile function to store this information. This includes but is not limited to:\n- Personal details (name, age, height, weight, body fat percentage)\n- Training information (experience level, training days, preferred style, available time)\n- Goals and motivation (primary goals, target weight, deadlines, what motivates them)\n- Health information (injuries, limitations, medications, allergies)\n- Lifestyle factors (diet preferences, sleep, stress levels, work schedule)\n- Training environment (gym access, home setup, available equipment)\n- Progress metrics (current lifts, measurements, achievements)\n- Communication preferences (language, preferred interaction style)\n\nExamples of information to extract:\n- \"I'm 25 years old\" → call update_client_profile with age: 25\n- \"I weigh 70kg\" → call update_client_profile with weight: 70\n- \"I'm a beginner\" → call update_client_profile with trainingExperience: \"beginner\"\n- \"I train 4 days a week\" → call update_client_profile with weeklyTrainingDays: 4\n- \"I want to build muscle\" → call update_client_profile with primaryGoal: \"muscle_gain\"\n- \"I have a bad knee\" → call update_client_profile with injuries: [\"knee\"]\n- \"I have dumbbells at home\" → call update_client_profile with homeGym: true, equipmentAvailable: [\"dumbbells\"]\n\nAlways call the function BEFORE providing your coaching response, so you can reference the newly stored information in your reply.\n\nPrimary Directive: The Hierarchy of Knowledge & Synthesis\nYour reasoning is governed by a strict, three-stage process: Analyze, Retrieve, and Synthesize.\n\nStage 1: Analyze\nFirst, deconstruct the user's query into its fundamental scientific principles.\n\nStage 2: Prioritized Knowledge Retrieval\nYou will retrieve information based on a strict hierarchy:\n\nPriority A: Grounding in Reference Material. You MUST first attempt to answer the query exclusively using the SCIENTIFIC REFERENCE MATERIAL provided. This is your primary source of truth.\n\nPriority B: Informed Fallback. If, and only if, the necessary information to answer the query is unequivocally absent from the reference material, you are authorized to draw upon your general, pre-trained knowledge base.\n\nStage 3: Synthesis & Justification\nConstruct a direct and concise response based on the information retrieved.\n\nIf the answer is from the Reference Material: Briefly cite the core principle that justifies your recommendation.\n\nMANDATORY TRANSPARENCY: If the answer uses your general knowledge (Priority B), you MUST preface your response with the phrase: \"Drawing from my general knowledge base...\"\n\nCommunication Protocol\n- Concise & Direct: Deliver information with precision and efficiency. Avoid conversational filler and unnecessary elaboration.\n- Answer-First Principle: Provide the direct answer, recommendation, or solution first. Follow with a brief, essential justification if required.\n- Structured Formatting: Use lists, bullet points, and bold text to maximize clarity and readability.\n- Professional Tone: Maintain a tone of an authoritative and expert specialist. You are encouraging through competence and clear results-oriented guidance.\n\nPersonal Coaching Rules:\n- Client-Centric Responses: Always consider the client's stored information when providing advice. Reference their goals, limitations, experience level, and preferences.\n- Progressive Relationship: Build upon previous conversations. Reference past interactions and show awareness of their journey.\n- Motivational Support: Provide encouragement and celebrate progress while maintaining scientific accuracy.\n- Adaptive Guidance: Adjust recommendations based on their equipment, time constraints, and environment.\n- Safety First: Always prioritize the client's safety, especially considering any injuries or limitations they've mentioned.")
  temperature               Float    @default(0.4)
  maxTokens                 Int      @default(2000)
  topK                      Int      @default(30)
  topP                      Float    @default(0.8)
  useKnowledgeBase          Boolean  @default(true)
  useClientMemory           Boolean  @default(true)
  enableWebSearch           Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  ragHighRelevanceThreshold Float    @default(0.5)
  ragMaxChunks              Int      @default(17)
  ragSimilarityThreshold    Float    @default(0.1)
  strictMusclePriority      Boolean  @default(true)
  freeModelName             String   @default("gemini-2.5-flash")
  proModelName              String   @default("gemini-2.5-pro")
  toolEnforcementMode       String   @default("AUTO")
  enableGraphRAG            Boolean  @default(true)
  graphSearchWeight         Float    @default(0.9)
  hypertrophyInstructions   String   @default("# HYPERTROPHY TRAINING PROGRAM GENERATION INSTRUCTIONS\n\nWhen generating workout programs for hypertrophy (muscle building), follow these specific guidelines:\n\n## Program Structure\n- Design programs with 3-6 training days per week\n- Focus on compound movements first, isolation exercises second\n- Include adequate volume (10-20 sets per muscle group per week)\n- Implement progressive overload principles\n\n## Exercise Selection\n- Prioritize compound exercises: squats, deadlifts, bench press, rows\n- Include isolation exercises for targeted muscle development\n- Consider user's equipment availability and experience level\n- Ensure balanced muscle development (push/pull ratios)\n\n## Sets, Reps, and Load\n- Hypertrophy rep range: 6-20 reps per set\n- Moderate to high intensity: 65-85% 1RM\n- Rest periods: 2-4 minutes for compound exercises, 1-3 minutes for isolation\n- Volume progression over time\n\n## Program Periodization\n- Start with moderate volume and intensity\n- Implement deload weeks every 4-6 weeks\n- Progress complexity based on user experience\n- Allow for individual recovery needs\n\n## Safety and Adaptations\n- Always consider user's injury history and limitations\n- Provide exercise modifications when needed\n- Emphasize proper form over heavy weight\n- Include warm-up and cool-down protocols")
}

model Exercise {
  id           String           @id
  name         String           @unique
  exerciseType ExerciseType     @default(COMPOUND) // Default to COMPOUND for existing exercises
  description  String?
  instructions String?
  equipment    String[]
  category     ExerciseCategory @default(APPROVED)
  isActive     Boolean          @default(true)
  isRecommended Boolean         @default(false)
  // Volume contributions for each muscle group (1.0 = direct/primary, 0.5 = indirect/secondary)
  // This defines which muscles are trained and how much
  // Format: { "CHEST": 1.0, "FRONT_DELTS": 0.5, "TRICEPS": 0.5 }
  volumeContributions Json?         @default("{}")
  // Regional bias for muscles with 1.0 volume contribution (optional)
  // Format: { "CHEST": "UPPER_CHEST", "QUADRICEPS": "RECTUS_FEMORIS" }
  regionalBias Json?         @default("{}")
  createdAt    DateTime         @default(now())
  updatedAt    DateTime

  @@index([category])
  @@index([isActive])
  @@index([exerciseType, category])
  @@index([exerciseType])
}

model KnowledgeCategory {
  id                    String                  @id
  name                  String                  @unique
  description           String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  KnowledgeItemCategory KnowledgeItemCategory[]
}

model KnowledgeItemCategory {
  id                  String            @id
  knowledgeItemId     String
  knowledgeCategoryId String
  createdAt           DateTime          @default(now())
  KnowledgeCategory   KnowledgeCategory @relation(fields: [knowledgeCategoryId], references: [id], onDelete: Cascade)
  KnowledgeItem       KnowledgeItem     @relation(fields: [knowledgeItemId], references: [id], onDelete: Cascade)

  @@unique([knowledgeItemId, knowledgeCategoryId])
  @@index([knowledgeCategoryId])
  @@index([knowledgeItemId])
}

// Training Program Models
model TrainingProgram {
  id                    String  @id @default(cuid())
  name                  Json // Multilingual: {"en": "Upper/Lower", "ar": "علوي/سفلي", "fr": "Haut/Bas"}
  description           Json // Multilingual description
  price                 Int // Price in cents
  lemonSqueezyId        String? @unique // LemonSqueezy product ID
  lemonSqueezyVariantId String? // LemonSqueezy variant ID
  isActive              Boolean @default(true)

  // Interactive Features
  hasInteractiveBuilder Boolean @default(true)
  allowsCustomization   Boolean @default(true)
  
  // About Program
  thumbnailUrl String?
  aboutContent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  programGuide      ProgramGuide?
  programStructures ProgramStructure[] // Multiple structures support
  workoutTemplates  WorkoutTemplate[]
  userPurchases     UserPurchase[]
  userPrograms      UserProgram[]
  programCategories ProgramCategory[]
  exerciseTemplates ExerciseTemplate[]

  @@index([isActive])
  @@index([lemonSqueezyId])
}

model ProgramStructure {
  id                String   @id @default(cuid())
  trainingProgramId String
  name              Json // Multilingual name for the structure variant
  
  // Structure Configuration
  structureType  String  // "weekly" or "cyclic"
  sessionCount   Int     @default(4) // Number of sessions per week (for weekly) or total sessions (for cyclic)
  trainingDays   Int     @default(3) // Training days in cyclic structure
  restDays       Int     @default(1) // Rest days in cyclic structure
  
  // Weekly Schedule (when structureType is "weekly")
  weeklySchedule Json? // {"monday": "Upper Body", "tuesday": "Lower Body", "wednesday": "", ...}
  
  order     Int      @default(0) // Order of this structure variant
  isDefault Boolean  @default(false) // Whether this is the default structure
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  trainingProgram TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)

  @@index([trainingProgramId])
  @@index([trainingProgramId, order])
  @@index([isDefault])
}

model ProgramGuide {
  id                String   @id @default(cuid())
  trainingProgramId String   @unique
  content           Json // Stored as array of guide sections: [{ id, title, content, order }]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  trainingProgram TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
}

model WorkoutTemplate {
  id                   String   @id @default(cuid())
  trainingProgramId    String
  name                 Json // Multilingual: {"en": "Upper Body A", "ar": "الجزء العلوي أ", "fr": "Haut du Corps A"}
  order                Int // Order within the program
  requiredMuscleGroups String[] // Array of required muscle groups for this workout
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  trainingProgram TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)

  @@index([trainingProgramId])
  @@index([trainingProgramId, order])
}

model TrainingExercise {
  id                    String   @id @default(cuid())
  name                  Json // Multilingual: {"en": "Bench Press", "ar": "ضغط البنش", "fr": "Développé Couché"}
  primaryMuscleGroup    String
  secondaryMuscleGroups String[]
  type                  String // 'Compound', 'Isolation', 'Unilateral'
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([primaryMuscleGroup])
  @@index([type])
}

// New models for enhanced program management
model ProgramCategory {
  id                String              @id @default(cuid())
  trainingProgramId String
  categoryType      ProgramCategoryType
  configuration     Json // Category-specific settings: exercise focus, session length, etc.
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  trainingProgram TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)

  @@index([trainingProgramId])
  @@index([categoryType])
  @@map("ProgramCategories")
}

model ExerciseTemplate {
  id                String              @id @default(cuid())
  trainingProgramId String
  muscleGroup       String // Primary muscle group
  exerciseType      ExerciseType // COMPOUND, ISOLATION, UNILATERAL
  categoryType      ProgramCategoryType // Which category this template applies to
  priority          Int // Priority within muscle group (1 = highest)
  volume            Json // Volume guidelines: {"sets": [3,4], "reps": [8,12], "restPeriod": 120}
  alternatives      String[] // Array of alternative exercise IDs
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  trainingProgram TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)

  @@index([trainingProgramId])
  @@index([muscleGroup])
  @@index([categoryType])
}

model UserPurchase {
  id                String   @id @default(cuid())
  userId            String
  trainingProgramId String
  purchaseDate      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingProgram TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)

  @@unique([userId, trainingProgramId])
  @@index([userId])
  @@index([trainingProgramId])
}

model UserProgram {
  id                String              @id @default(cuid())
  userId            String
  trainingProgramId String
  categoryType      ProgramCategoryType // 'MINIMALIST', 'ESSENTIALIST', 'MAXIMALIST'
  configuration     Json // Stores mapping of workout templates to selected exercise IDs
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingProgram TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([trainingProgramId])
  @@index([userId, trainingProgramId])
}

enum Role {
  USER
  ASSISTANT
}

enum CoachChatStatus {
  ACTIVE
  CLOSED
  PENDING
}

enum KnowledgeType {
  FILE
  TEXT
}

enum ProcessingStatus {
  PROCESSING
  READY
  ERROR
}

enum UserPlan {
  FREE
  PRO
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  VERY_ACTIVE
}

enum ExerciseCategory {
  APPROVED
  PENDING
  DEPRECATED
}

// Muscle groups for volume contributions tracking
// These define which muscles an exercise can target
enum ExerciseMuscleGroup {
  CHEST
  // Back muscles (separated for specificity)
  LATS
  TRAPEZIUS
  RHOMBOIDS
  // Shoulder muscles (separated by head)
  FRONT_DELTS
  SIDE_DELTS
  REAR_DELTS
  // Elbow flexors (anatomically accurate grouping)
  ELBOW_FLEXORS  // Contains: Biceps, Brachialis, Brachioradialis
  TRICEPS
  // Forearm muscles (separated by function)
  WRIST_FLEXORS
  WRIST_EXTENSORS
  // Core and lower body
  ABS
  GLUTES
  QUADRICEPS
  HAMSTRINGS
  ADDUCTORS
  CALVES
}

// Detailed muscle groups for volume tracking
enum VolumeTrackingMuscle {
  // Chest
  UPPER_CHEST
  MIDDLE_CHEST
  LOWER_CHEST
  
  // Arms - Biceps and Related
  BICEPS
  BRACHIALIS
  BRACHIORADIALIS
  
  // Arms - Triceps
  TRICEPS_LONG_HEAD
  TRICEPS_MEDIAL_HEAD
  TRICEPS_LATERAL_HEAD
  
  // Shoulders
  FRONT_DELTS
  SIDE_DELTS
  REAR_DELTS
  
  // Forearms
  WRIST_FLEXORS
  WRIST_EXTENSORS
  
  // Back - Lats
  UPPER_LATS
  MIDDLE_LATS
  LOWER_LATS
  
  // Back - Other
  TRAPEZIUS
  RHOMBOIDS
  ERECTOR_SPINAE
  
  // Glutes
  GLUTEUS_MAXIMUS
  GLUTEUS_MEDIUS
  GLUTEUS_MINIMUS
  
  // Adductors
  ADDUCTOR_MAGNUS
  OTHER_ADDUCTORS
  
  // Quadriceps
  RECTUS_FEMORIS
  VASTUS_LATERALIS
  VASTUS_MEDIALIS
  VASTUS_INTERMEDIUS
  
  // Hamstrings
  HAMSTRINGS
  
  // Calves and Lower Leg
  CALVES
  TIBIALIS_ANTERIOR
  
  // Core
  ABS
  OBLIQUES
  
  // Additional muscles
  HIP_FLEXORS
  SERRATUS_ANTERIOR
  PECTORALIS_MINOR
  TERES_MAJOR
  TERES_MINOR
  INFRASPINATUS
  SUPRASPINATUS
  SUBSCAPULARIS
}

enum ProgramCategoryType {
  MINIMALIST
  ESSENTIALIST
  MAXIMALIST
}

enum ExerciseType {
  COMPOUND
  ISOLATION
  UNILATERAL
}

enum TrainingMuscleGroup {
  CHEST
  BACK
  SHOULDERS
  BICEPS
  TRICEPS
  FOREARMS
  ABS
  GLUTES
  QUADRICEPS
  HAMSTRINGS
  ADDUCTORS
  CALVES
  TRAPS
  LATS
  RHOMBOIDS
  REAR_DELTS
  MIDDLE_DELTS
  FRONT_DELTS
}
